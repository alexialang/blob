name: CI/CD Pipeline - Qualité et Tests

on:
  push:
    branches: [ main, dev-admin-crud, develop ]
  pull_request:
    branches: [ main, dev-admin-crud, develop ]

jobs:
  test:
    name: Tests et Qualité
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mariadb:11.8.1-rc
        env:
          MYSQL_ROOT_PASSWORD: toor
          MYSQL_DATABASE: blob
          MYSQL_USER: blob
          MYSQL_PASSWORD: supersecuredpassword
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, intl, pdo_mysql, zip, gd
        coverage: xdebug

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Setup test database
      run: |
        echo "APP_ENV=test" > .env
        echo "APP_SECRET=cb2616cccbd111d25267679e3bbb7616" >> .env
        echo "DATABASE_URL=mysql://blob:supersecuredpassword@127.0.0.1:3306/blob?serverVersion=11.8.1-mariadb&charset=utf8mb4" >> .env
        echo "MAILER_DSN=null://null" >> .env
        echo "CORS_ALLOW_ORIGIN='^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$'" >> .env
        php bin/console doctrine:database:create --env=test
        php bin/console doctrine:migrations:migrate --env=test --no-interaction

    - name: Run tests
      run: php bin/phpunit --coverage-clover=coverage.xml

    - name: Run PHPStan
      run: vendor/bin/phpstan analyse src/ --level=5

    - name: Run PHP CS Fixer
      run: vendor/bin/php-cs-fixer fix --dry-run --diff

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  quality:
    name: Qualité du Code
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, intl, pdo_mysql, zip, gd

    - name: Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Run Infection (Mutation Testing)
      run: vendor/bin/infection --min-msi=80 --no-interaction

    - name: Check code formatting
      run: vendor/bin/php-cs-fixer fix --dry-run --diff

  security:
    name: Sécurité
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, intl, pdo_mysql, zip, gd

    - name: Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Security check
      run: composer audit --format=json --output=security-report.json

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.json

  build:
    name: Build Docker Local
    runs-on: ubuntu-latest
    needs: [test, quality, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t blob-app:${{ github.sha }} .
        docker tag blob-app:${{ github.sha }} blob-app:latest
        echo "Build Docker réussi"
        echo "Image: blob-app:${{ github.sha }}"
        echo "Image: blob-app:latest"

    - name: Build success notification
      run: |
        echo "Pipeline CI/CD terminé avec succès"
        echo "Tests: PASSED"
        echo "Qualité: PASSED"
        echo "Sécurité: PASSED"
        echo "Build Docker: PASSED"
        echo ""
        echo "Code prêt pour le déploiement manuel"
