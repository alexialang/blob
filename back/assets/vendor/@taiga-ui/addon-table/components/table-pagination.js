/**
 * Bundled by jsDelivr using Rollup v2.79.2 and Terser v5.39.0.
 * Original file: /npm/@taiga-ui/addon-table@4.36.0/fesm2022/taiga-ui-addon-table-components-table-pagination.mjs
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{AsyncPipe as t,NgForOf as n,NgIf as e}from"@angular/common";import*as i from"@angular/core";import{inject as o,EventEmitter as s,Component as a,ChangeDetectionStrategy as r,Input as p,Output as c}from"@angular/core";import{TUI_TABLE_PAGINATION_TEXTS as g}from"@taiga-ui/addon-table/tokens";import{TuiButton as m}from"@taiga-ui/core/components/button";import*as l from"@taiga-ui/core/components/data-list";import{TuiDataList as u}from"@taiga-ui/core/components/data-list";import{TuiIcon as h}from"@taiga-ui/core/components/icon";import{TuiLink as d}from"@taiga-ui/core/components/link";import{TuiDropdownDirective as b,TuiDropdownOpen as f}from"@taiga-ui/core/directives/dropdown";import{TUI_SPIN_ICONS as k,TUI_SPIN_TEXTS as y,TUI_COMMON_ICONS as x}from"@taiga-ui/core/tokens";import{PolymorpheusOutlet as z,PolymorpheusTemplate as I}from"@taiga-ui/polymorpheus";import{tuiCreateToken as D,tuiProvideOptions as w}from"@taiga-ui/cdk/utils/miscellaneous";const O={sizeOptionContent:function({$implicit:t}){return`${t}`},showPages:!0,items:[10,20,50,100],size:10},C=D(O);function T(t){return w(C,t,O)}class v{constructor(){this.options=o(C),this.open=!1,this.icons=o(k),this.spinTexts$=o(y),this.texts$=o(g),this.commonIcons=o(x),this.items=this.options.items,this.total=0,this.page=0,this.size=this.options.size,this.paginationChange=new s}onItem(t){const{start:n}=this;this.size=t,this.open=!1,this.page=Math.floor(n/this.size),this.paginationChange.emit(this.pagination)}get pages(){return Math.ceil(this.total/this.size)}get showPages(){return this.options.showPages}get sizeOptionContent(){return this.options.sizeOptionContent}get start(){return Math.min(this.page,Math.floor(this.total/this.size))*this.size}get end(){return Math.min(this.start+this.size,this.total)}get leftDisabled(){return!this.start}get rightDisabled(){return this.end===this.total}get pagination(){return{page:this.page,size:this.size}}back(){this.page--,this.paginationChange.emit(this.pagination)}forth(){this.page++,this.paginationChange.emit(this.pagination)}static{this.ɵfac=i.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"16.2.12",ngImport:i,type:v,deps:[],target:i.ɵɵFactoryTarget.Component})}static{this.ɵcmp=i.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"16.2.12",type:v,isStandalone:!0,selector:"tui-table-pagination",inputs:{items:"items",total:"total",page:"page",size:"size"},outputs:{paginationChange:"paginationChange"},ngImport:i,template:'<ng-container *ngIf="texts$ | async as texts">\n    <span class="t-pages">\n        <ng-container *ngIf="showPages">\n            {{ texts.pages }}\n            <strong class="t-strong">{{ pages }}</strong>\n        </ng-container>\n    </span>\n    <span automation-id="tui-table-pagination__lines-per-page-wrapper">\n        {{ texts.linesPerPage }}\n\n        <button\n            *ngIf="total !== 0; else zeroTotal"\n            tuiLink\n            type="button"\n            [tuiDropdown]="content"\n            [(tuiDropdownOpen)]="open"\n        >\n            <strong>{{ start + 1 }}–{{ end }}</strong>\n        </button>\n        <ng-template #zeroTotal>\n            <strong>0 - 0</strong>\n        </ng-template>\n        <ng-template #content>\n            <tui-data-list size="s">\n                <ng-container *ngFor="let item of items">\n                    <button\n                        tuiOption\n                        type="button"\n                        class="t-item"\n                        (click)="onItem(item)"\n                    >\n                        <ng-container\n                            *polymorpheusOutlet="sizeOptionContent as text; context: {$implicit: item, total: total}"\n                        >\n                            {{ text }}\n                        </ng-container>\n                        <tui-icon\n                            *ngIf="item === size; else fakeIcon"\n                            class="t-checkmark"\n                            [icon]="commonIcons.check"\n                        />\n\n                        <ng-template #fakeIcon>\n                            <span class="t-checkmark"></span>\n                        </ng-template>\n                    </button>\n                </ng-container>\n            </tui-data-list>\n        </ng-template>\n        {{ texts.of }}\n        <strong class="t-strong">{{ total }}</strong>\n    </span>\n    <ng-container *ngIf="spinTexts$ | async as spinTexts">\n        <button\n            appearance="icon"\n            size="xs"\n            tuiIconButton\n            type="button"\n            class="t-back"\n            [disabled]="leftDisabled"\n            [iconStart]="icons.decrement"\n            (click)="back()"\n        >\n            {{ spinTexts[0] }}\n        </button>\n        <button\n            appearance="icon"\n            size="xs"\n            tuiIconButton\n            type="button"\n            [disabled]="rightDisabled"\n            [iconStart]="icons.increment"\n            (click)="forth()"\n        >\n            {{ spinTexts[1] }}\n        </button>\n    </ng-container>\n</ng-container>\n',styles:[":host{display:flex;font:var(--tui-font-text-s);align-items:center;color:var(--tui-text-tertiary)}.t-strong{color:var(--tui-text-primary)}.t-pages{margin-right:auto}.t-item{min-inline-size:5.5rem;box-sizing:border-box}.t-checkmark{min-inline-size:1rem;font-size:1rem;margin-inline-start:.25rem}.t-back{margin:0 .25rem 0 1.5rem}\n"],dependencies:[{kind:"pipe",type:t,name:"async"},{kind:"directive",type:n,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:e,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:z,selector:"[polymorpheusOutlet]",inputs:["polymorpheusOutlet","polymorpheusOutletContext"]},{kind:"directive",type:m,selector:"a[tuiButton],button[tuiButton],a[tuiIconButton],button[tuiIconButton]",inputs:["size"]},{kind:"component",type:l.TuiDataListComponent,selector:"tui-data-list",inputs:["emptyContent","size"]},{kind:"component",type:l.TuiOption,selector:"button[tuiOption]:not([new]), a[tuiOption]:not([new]), label[tuiOption]:not([new])",inputs:["disabled","value"]},{kind:"directive",type:b,selector:"[tuiDropdown]:not(ng-container):not(ng-template)",inputs:["tuiDropdown"],exportAs:["tuiDropdown"]},{kind:"directive",type:f,selector:"[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]",inputs:["tuiDropdownEnabled","tuiDropdownOpen"],outputs:["tuiDropdownOpenChange"]},{kind:"component",type:h,selector:"tui-icon",inputs:["icon","background"]},{kind:"directive",type:d,selector:"a[tuiLink], button[tuiLink]",inputs:["pseudo"]}],changeDetection:i.ChangeDetectionStrategy.OnPush})}}i.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"16.2.12",ngImport:i,type:v,decorators:[{type:a,args:[{standalone:!0,selector:"tui-table-pagination",imports:[t,n,e,z,I,m,u,b,f,h,d],changeDetection:r.OnPush,template:'<ng-container *ngIf="texts$ | async as texts">\n    <span class="t-pages">\n        <ng-container *ngIf="showPages">\n            {{ texts.pages }}\n            <strong class="t-strong">{{ pages }}</strong>\n        </ng-container>\n    </span>\n    <span automation-id="tui-table-pagination__lines-per-page-wrapper">\n        {{ texts.linesPerPage }}\n\n        <button\n            *ngIf="total !== 0; else zeroTotal"\n            tuiLink\n            type="button"\n            [tuiDropdown]="content"\n            [(tuiDropdownOpen)]="open"\n        >\n            <strong>{{ start + 1 }}–{{ end }}</strong>\n        </button>\n        <ng-template #zeroTotal>\n            <strong>0 - 0</strong>\n        </ng-template>\n        <ng-template #content>\n            <tui-data-list size="s">\n                <ng-container *ngFor="let item of items">\n                    <button\n                        tuiOption\n                        type="button"\n                        class="t-item"\n                        (click)="onItem(item)"\n                    >\n                        <ng-container\n                            *polymorpheusOutlet="sizeOptionContent as text; context: {$implicit: item, total: total}"\n                        >\n                            {{ text }}\n                        </ng-container>\n                        <tui-icon\n                            *ngIf="item === size; else fakeIcon"\n                            class="t-checkmark"\n                            [icon]="commonIcons.check"\n                        />\n\n                        <ng-template #fakeIcon>\n                            <span class="t-checkmark"></span>\n                        </ng-template>\n                    </button>\n                </ng-container>\n            </tui-data-list>\n        </ng-template>\n        {{ texts.of }}\n        <strong class="t-strong">{{ total }}</strong>\n    </span>\n    <ng-container *ngIf="spinTexts$ | async as spinTexts">\n        <button\n            appearance="icon"\n            size="xs"\n            tuiIconButton\n            type="button"\n            class="t-back"\n            [disabled]="leftDisabled"\n            [iconStart]="icons.decrement"\n            (click)="back()"\n        >\n            {{ spinTexts[0] }}\n        </button>\n        <button\n            appearance="icon"\n            size="xs"\n            tuiIconButton\n            type="button"\n            [disabled]="rightDisabled"\n            [iconStart]="icons.increment"\n            (click)="forth()"\n        >\n            {{ spinTexts[1] }}\n        </button>\n    </ng-container>\n</ng-container>\n',styles:[":host{display:flex;font:var(--tui-font-text-s);align-items:center;color:var(--tui-text-tertiary)}.t-strong{color:var(--tui-text-primary)}.t-pages{margin-right:auto}.t-item{min-inline-size:5.5rem;box-sizing:border-box}.t-checkmark{min-inline-size:1rem;font-size:1rem;margin-inline-start:.25rem}.t-back{margin:0 .25rem 0 1.5rem}\n"]}]}],propDecorators:{items:[{type:p}],total:[{type:p}],page:[{type:p}],size:[{type:p}],paginationChange:[{type:c}]}});export{O as TUI_TABLE_PAGINATION_DEFAULT_OPTIONS,C as TUI_TABLE_PAGINATION_OPTIONS,v as TuiTablePagination,T as tuiTablePaginationOptionsProvider};export default null;
