/**
 * Bundled by jsDelivr using Rollup v2.79.2 and Terser v5.39.0.
 * Original file: /npm/@taiga-ui/cdk@4.36.0/fesm2022/taiga-ui-cdk-date-time.mjs
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{CHAR_NO_BREAK_SPACE as t,CHAR_EN_DASH as e}from"@taiga-ui/cdk/constants";import{tuiInRange as r,tuiNormalizeToIntNumber as a}from"@taiga-ui/cdk/utils/math";function s(t,e,r){return r&&r<t?r:e&&e>t?e:t}const n=7,o=365,i=366,h=12,u=1,m=0,l=11,c=0,d=9999,y=2099,g=`${t}${e}${t}`,f=1e3,D=60,M=60,S=24,p=6e4,w=36e5,b=864e5,v=10,Y=20+g.length,$={Sunday:0,Monday:1,Tuesday:2,Wednesday:3,Thursday:4,Friday:5,Saturday:6},N={January:0,February:1,March:2,April:3,May:4,June:5,July:6,August:7,September:8,October:9,November:10,December:11};class L{constructor(t){this.year=t,ngDevMode&&console.assert(L.isValidYear(t))}static isValidYear(t){return Number.isInteger(t)&&r(t,0,1e4)}static isLeapYear(t){return ngDevMode&&console.assert(L.isValidYear(t)),t%400==0||t%4==0&&t%100!=0}static getAbsoluteLeapYears(t){return ngDevMode&&console.assert(L.isValidYear(t)),Math.ceil(t/400)+(Math.ceil(t/4)-Math.ceil(t/100))}static lengthBetween(t,e){return e.year-t.year}static normalizeYearPart(t){return a(t,0,d)}get formattedYear(){return String(this.year).padStart(4,"0")}get isLeapYear(){return L.isLeapYear(this.year)}get absoluteLeapYears(){return L.getAbsoluteLeapYears(this.year)}yearBefore({year:t}){return this.year<t}yearSameOrBefore({year:t}){return this.year<=t}yearSame({year:t}){return this.year===t}yearSameOrAfter({year:t}){return this.year>=t}yearAfter({year:t}){return this.year>t}append({year:t=0}){ngDevMode&&console.assert(Number.isInteger(t));const e=this.year+t;return ngDevMode&&console.assert(L.isValidYear(e)),new L(e)}toString(){return this.formattedYear}valueOf(){return this.year}[Symbol.toPrimitive](t){return Date.prototype[Symbol.toPrimitive].call(this,t)}toJSON(){return this.formattedYear}}class P extends L{constructor(t,e){super(t),this.month=e,ngDevMode&&console.assert(P.isValidMonth(t,e))}static isValidMonth(t,e){return L.isValidYear(t)&&P.isValidMonthPart(e)}static getMonthDaysCount(t,e){switch(ngDevMode&&console.assert(P.isValidMonthPart(t)),t){case N.April:case N.June:case N.November:case N.September:return 30;case N.February:return e?29:28;default:return 31}}static currentLocal(){const t=new Date;return new P(t.getFullYear(),t.getMonth())}static currentUtc(){const t=new Date;return new P(t.getUTCFullYear(),t.getUTCMonth())}static lengthBetween(t,e){const r=t.month+12*t.year;return e.month+12*e.year-r}static normalizeMonthPart(t){return a(t,0,11)}static isValidMonthPart(t){return Number.isInteger(t)&&r(t,0,12)}get formattedMonthPart(){return String(this.month+1).padStart(2,"0")}get daysCount(){return P.getMonthDaysCount(this.month,this.isLeapYear)}monthBefore(t){return this.yearBefore(t)||this.yearSame(t)&&this.month<t.month}monthSameOrBefore(t){return this.yearBefore(t)||this.yearSame(t)&&this.month<=t.month}monthSame(t){return this.yearSame(t)&&this.month===t.month}monthSameOrAfter(t){return this.yearAfter(t)||this.yearSame(t)&&this.month>=t.month}monthAfter(t){return this.yearAfter(t)||this.yearSame(t)&&this.month>t.month}append({year:t=0,month:e=0}){const r=(this.year+t)*h+this.month+e;return new P(Math.floor(r/h),r%h)}toString(){return`${this.formattedMonthPart}.${this.formattedYear}`}valueOf(){return this.toLocalNativeDate().valueOf()}toJSON(){return`${super.toJSON()}-${this.formattedMonthPart}`}toLocalNativeDate(){return new Date(this.year,this.month)}toUtcNativeDate(){return new Date(Date.UTC(this.year,this.month))}}class A extends P{constructor(t,e,r){super(t,e),this.day=r,ngDevMode&&console.assert(A.isValidDay(t,e,r))}static fromLocalNativeDate(t){return new A(t.getFullYear(),t.getMonth(),t.getDate())}static fromUtcNativeDate(t){return new A(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate())}static isValidDay(t,e,a){return P.isValidMonth(t,e)&&Number.isInteger(a)&&r(a,1,P.getMonthDaysCount(e,L.isLeapYear(t))+1)}static currentLocal(){const t=new Date,e=t.getFullYear(),r=t.getMonth(),a=t.getDate();return new A(e,r,a)}static currentUtc(){const t=new Date,e=t.getUTCFullYear(),r=t.getUTCMonth(),a=t.getUTCDate();return new A(e,r,a)}static normalizeOf(t,e,r){const a=L.normalizeYearPart(t),s=P.normalizeMonthPart(e),n=A.normalizeDayPart(r,s,a);return new A(a,s,n)}static lengthBetween(t,e){return Math.round((e.toLocalNativeDate().getTime()-t.toLocalNativeDate().getTime())/864e5)}static parseRawDateString(t,e="DMY"){switch(ngDevMode&&console.assert(10===t.length,"[parseRawDateString]: wrong date string length"),e){case"MDY":return{day:parseInt(t.slice(3,5),10),month:parseInt(t.slice(0,2),10)-1,year:parseInt(t.slice(6,10),10)};case"YMD":return{day:parseInt(t.slice(8,10),10),month:parseInt(t.slice(5,7),10)-1,year:parseInt(t.slice(0,4),10)};default:return{day:parseInt(t.slice(0,2),10),month:parseInt(t.slice(3,5),10)-1,year:parseInt(t.slice(6,10),10)}}}static normalizeParse(t,e="DMY"){const{day:r,month:a,year:s}=this.parseRawDateString(t,e);return A.normalizeOf(s,a,r)}static jsonParse(t){const{day:e,month:a,year:s}=this.parseRawDateString(t,"YMD");if(!P.isValidMonth(s,a)||!Number.isInteger(e)||!r(e,1,P.getMonthDaysCount(a,L.isLeapYear(s))+1))throw new T(s,a,e);return new A(s,a,e)}static normalizeDayPart(t,e,r){ngDevMode&&console.assert(P.isValidMonth(r,e));const s=P.getMonthDaysCount(e,L.isLeapYear(r));return a(t,1,s)}get formattedDayPart(){return String(this.day).padStart(2,"0")}get isWeekend(){const t=this.dayOfWeek(!1);return t===$.Saturday||t===$.Sunday}dayOfWeek(t=!0){const e=t?this.toLocalNativeDate().getDay()-1:this.toLocalNativeDate().getDay();return e<0?6:e}dayBefore(t){return this.monthBefore(t)||this.monthSame(t)&&this.day<t.day}daySameOrBefore(t){return this.monthBefore(t)||this.monthSame(t)&&this.day<=t.day}daySame(t){return this.monthSame(t)&&this.day===t.day}daySameOrAfter(t){return this.monthAfter(t)||this.monthSame(t)&&this.day>=t.day}dayAfter(t){return this.monthAfter(t)||this.monthSame(t)&&this.day>t.day}dayLimit(t,e){return null!==t&&this.dayBefore(t)?t:null!==e&&this.dayAfter(e)?e:this}append({year:t=0,month:e=0,day:r=0}){const a=(this.year+t)*h+this.month+e;let s=Math.floor(a/h),n=a%h,o=Math.min(this.day,P.getMonthDaysCount(n,L.isLeapYear(s)))+r;for(;o>P.getMonthDaysCount(n,L.isLeapYear(s));)o-=P.getMonthDaysCount(n,L.isLeapYear(s)),n===N.December?(s++,n=N.January):n++;for(;o<1;)n===N.January?(s--,n=N.December):n--,o+=P.getMonthDaysCount(n,L.isLeapYear(s));return new A(s,n,o)}getFormattedDay(t,e){ngDevMode&&console.assert(1===e.length,"Separator should consist of only 1 symbol");const r=this.formattedDayPart,a=this.formattedMonthPart,s=this.formattedYear;switch(t){case"MDY":return`${a}${e}${r}${e}${s}`;case"YMD":return`${s}${e}${a}${e}${r}`;default:return`${r}${e}${a}${e}${s}`}}toString(t="DMY",e="."){return this.getFormattedDay(t,e)}toJSON(){return`${super.toJSON()}-${this.formattedDayPart}`}toLocalNativeDate(){return new Date(this.year,this.month,this.day)}toUtcNativeDate(){return new Date(Date.UTC(this.year,this.month,this.day))}}class T extends Error{constructor(t,e,r){super(ngDevMode?`Invalid day: ${t}-${e}-${r}`:"")}}class O{constructor(t,e){this.from=t,this.to=e,ngDevMode&&console.assert(t.monthSameOrBefore(e))}static sort(t,e){return t.monthSameOrBefore(e)?new O(t,e):new O(e,t)}get isSingleMonth(){return this.from.monthSame(this.to)}monthSame(t){return this.from.monthSame(t.from)&&this.to.monthSame(t.to)}toString(){return`${this.from}${g}${this.to}`}}class I extends O{constructor(t,e){super(t,e),this.from=t,this.to=e,ngDevMode&&console.assert(t.daySameOrBefore(e))}static sort(t,e){return t.daySameOrBefore(e)?new I(t,e):new I(e,t)}static normalizeParse(t,e="DMY"){const r=A.normalizeParse(t.slice(0,10),e);return t.length<Y?new I(r,r):I.sort(r,A.normalizeParse(t.slice(10+g.length),e))}get isSingleDay(){return this.from.daySame(this.to)}daySame(t){return this.from.daySame(t.from)&&this.to.daySame(t.to)}dayLimit(t,e){return new I(this.from.dayLimit(t,e),this.to.dayLimit(t,e))}getFormattedDayRange(t,e){const r=this.from.getFormattedDay(t,e),a=this.to.getFormattedDay(t,e);return`${r}${g}${a}`}toString(t="DMY",e="."){return this.getFormattedDayRange(t,e)}toArray(){const{from:t,to:e}=this,r=[];for(const a=t.toUtcNativeDate();a<=e.toUtcNativeDate();a.setDate(a.getDate()+1))r.push(A.fromLocalNativeDate(a));return r}}const C=new A(0,0,1),z=new A(d,11,31),B=new A(2099,11,31);class U{constructor(t,e,a=0,s=0){this.hours=t,this.minutes=e,this.seconds=a,this.ms=s,ngDevMode&&console.assert(Number.isInteger(t)&&r(t,0,1/0)&&Number.isInteger(e)&&r(e,0,M)&&Number.isInteger(a)&&r(a,0,D)&&Number.isInteger(s)&&r(s,0,1e3),"Time must be real, but got:",t,e,a,s)}static isValidTime(t,e,a=0,s=0){return Number.isInteger(t)&&r(t,0,24)&&Number.isInteger(e)&&r(e,0,M)&&Number.isInteger(a)&&r(a,0,D)&&Number.isInteger(s)&&r(s,0,1e3)}static current(){return U.fromAbsoluteMilliseconds(Date.now()%b)}static currentLocal(){const t=new Date;return U.fromAbsoluteMilliseconds((Date.now()-t.getTimezoneOffset()*p)%b)}static fromAbsoluteMilliseconds(t){ngDevMode&&console.assert(Number.isInteger(t)),ngDevMode&&console.assert(r(t,0,b),"Milliseconds must be below 86400000 (milliseconds in a day).");const e=Math.floor(t/w),a=Math.floor(t%w/p),s=Math.floor(t%w%p/1e3)||0,n=Math.floor(t%w%p%1e3)||0;return new U(e,a,s,n)}static fromString(t){const e=this.parseHours(t),r=Number(t.slice(3,5))||0,a=Number(t.slice(6,8))||0,s=Number(t.slice(9,12))||0;return new U(e,r,a,s)}static fromLocalNativeDate(t){return new U(t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds())}static parseMeridiemPeriod(t){return/[AP]M/.exec(t.toUpperCase().replaceAll(/\W/g,""))?.[0]||null}static parseHours(t){const e=Number(t.slice(0,2)),r=this.parseMeridiemPeriod(t);return r?12===e?"AM"===r?0:12:"PM"===r?e+12:e:e}shift({hours:t=0,minutes:e=0,seconds:r=0,ms:a=0}){const s=this.toAbsoluteMilliseconds()+t*w+e*p+r*f+a,n=Math.floor(s/f),o=Math.floor(n/D),i=Math.floor(o/M);return new U(this.normalizeToRange(i,24),this.normalizeToRange(o,M),this.normalizeToRange(n,D),this.normalizeToRange(s,f))}toString(e){const r=e?.startsWith("HH:MM:SS.MSS")||!e&&this.ms>0,a=r||e?.startsWith("HH:MM:SS")||!e&&this.seconds>0,{hours:s=this.hours,meridiem:n=""}=e?.includes("AA")?this.toTwelveHour(this.hours):{};return`${`${this.formatTime(s)}:${this.formatTime(this.minutes)}`}${a?`:${this.formatTime(this.seconds)}`:""}${r?`.${this.formatTime(this.ms,3)}`:""}${n&&`${t}${n}`}`}valueOf(){return this.toAbsoluteMilliseconds()}[Symbol.toPrimitive](t){return Date.prototype[Symbol.toPrimitive].call(this,t)}toAbsoluteMilliseconds(){return this.hours*w+this.minutes*p+1e3*this.seconds+this.ms}formatTime(t,e=2){return String(t).padStart(e,"0")}toTwelveHour(t){const e=t>=12?"PM":"AM";return 0===t||12===t?{meridiem:e,hours:12}:{meridiem:e,hours:t%12}}normalizeToRange(t,e){return(t%e+e)%e}}export{v as DATE_FILLER_LENGTH,Y as DATE_RANGE_FILLER_LENGTH,i as DAYS_IN_LEAP_YEAR,o as DAYS_IN_NORMAL_YEAR,n as DAYS_IN_WEEK,S as HOURS_IN_DAY,y as MAX_DISPLAYED_YEAR,l as MAX_MONTH,d as MAX_YEAR,b as MILLISECONDS_IN_DAY,w as MILLISECONDS_IN_HOUR,p as MILLISECONDS_IN_MINUTE,f as MILLISECONDS_IN_SECOND,M as MINUTES_IN_HOUR,u as MIN_DAY,m as MIN_MONTH,c as MIN_YEAR,h as MONTHS_IN_YEAR,g as RANGE_SEPARATOR_CHAR,D as SECONDS_IN_MINUTE,C as TUI_FIRST_DAY,z as TUI_LAST_DAY,B as TUI_LAST_DISPLAYED_DAY,A as TuiDay,$ as TuiDayOfWeek,I as TuiDayRange,T as TuiInvalidDayException,P as TuiMonth,N as TuiMonthNumber,O as TuiMonthRange,U as TuiTime,L as TuiYear,s as tuiDateClamp};export default null;
